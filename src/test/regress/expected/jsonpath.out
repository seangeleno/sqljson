--jsonpath io
select ''::jsonpath;
ERROR:  invalid input syntax for jsonpath: ""
LINE 1: select ''::jsonpath;
               ^
select '$'::jsonpath;
 jsonpath 
----------
 $
(1 row)

select 'strict $'::jsonpath;
 jsonpath 
----------
 strict $
(1 row)

select 'lax $'::jsonpath;
 jsonpath 
----------
 $
(1 row)

select '$.a'::jsonpath;
 jsonpath 
----------
 $."a"
(1 row)

select '$.a.v'::jsonpath;
 jsonpath  
-----------
 $."a"."v"
(1 row)

select '$.a.*'::jsonpath;
 jsonpath 
----------
 $."a".*
(1 row)

select '$.*[*]'::jsonpath;
 jsonpath 
----------
 $.*[*]
(1 row)

select '$.a[*]'::jsonpath;
 jsonpath 
----------
 $."a"[*]
(1 row)

select '$.a[*][*]'::jsonpath;
  jsonpath   
-------------
 $."a"[*][*]
(1 row)

select '$[*]'::jsonpath;
 jsonpath 
----------
 $[*]
(1 row)

select '$[0]'::jsonpath;
 jsonpath 
----------
 $[0]
(1 row)

select '$[*][0]'::jsonpath;
 jsonpath 
----------
 $[*][0]
(1 row)

select '$[*].a'::jsonpath;
 jsonpath 
----------
 $[*]."a"
(1 row)

select '$[*][0].a.b'::jsonpath;
    jsonpath     
-----------------
 $[*][0]."a"."b"
(1 row)

select '$.a.**.b'::jsonpath;
   jsonpath   
--------------
 $."a".**."b"
(1 row)

select '$.a.**{2}.b'::jsonpath;
    jsonpath     
-----------------
 $."a".**{2}."b"
(1 row)

select '$.a.**{2,2}.b'::jsonpath;
    jsonpath     
-----------------
 $."a".**{2}."b"
(1 row)

select '$.a.**{2,5}.b'::jsonpath;
     jsonpath      
-------------------
 $."a".**{2,5}."b"
(1 row)

select '$.a.**{,5}.b'::jsonpath;
     jsonpath     
------------------
 $."a".**{,5}."b"
(1 row)

select '$.a.**{5,}.b'::jsonpath;
     jsonpath     
------------------
 $."a".**{5,}."b"
(1 row)

select '$+1'::jsonpath;
 jsonpath 
----------
 ($ + 1)
(1 row)

select '$-1'::jsonpath;
 jsonpath 
----------
 ($ - 1)
(1 row)

select '$--+1'::jsonpath;
 jsonpath 
----------
 ($ - -1)
(1 row)

select '$.a/+-1'::jsonpath;
   jsonpath   
--------------
 ($."a" / -1)
(1 row)

select '$.g ? ($.a == 1)'::jsonpath;
      jsonpath      
--------------------
 $."g"?($."a" == 1)
(1 row)

select '$.g ? (@ == 1)'::jsonpath;
    jsonpath    
----------------
 $."g"?(@ == 1)
(1 row)

select '$.g ? (.a == 1)'::jsonpath;
      jsonpath      
--------------------
 $."g"?(@."a" == 1)
(1 row)

select '$.g ? (@.a == 1)'::jsonpath;
      jsonpath      
--------------------
 $."g"?(@."a" == 1)
(1 row)

select '$.g ? (@.a == 1 || @.a == 4)'::jsonpath;
             jsonpath             
----------------------------------
 $."g"?(@."a" == 1 || @."a" == 4)
(1 row)

select '$.g ? (@.a == 1 && @.a == 4)'::jsonpath;
             jsonpath             
----------------------------------
 $."g"?(@."a" == 1 && @."a" == 4)
(1 row)

select '$.g ? (@.a == 1 || @.a == 4 && @.b == 7)'::jsonpath;
                    jsonpath                    
------------------------------------------------
 $."g"?(@."a" == 1 || @."a" == 4 && @."b" == 7)
(1 row)

select '$.g ? (@.a == 1 || !(@.a == 4) && @.b == 7)'::jsonpath;
                     jsonpath                      
---------------------------------------------------
 $."g"?(@."a" == 1 || !(@."a" == 4) && @."b" == 7)
(1 row)

select '$.g ? (@.a == 1 || !(@.x >= 123 || @.a == 4) && @.b == 7)'::jsonpath;
                             jsonpath                              
-------------------------------------------------------------------
 $."g"?(@."a" == 1 || !(@."x" >= 123 || @."a" == 4) && @."b" == 7)
(1 row)

select '$.g ? (.x >= @[*]?(@.a > "abc"))'::jsonpath;
               jsonpath                
---------------------------------------
 $."g"?(@."x" >= @[*]?(@."a" > "abc"))
(1 row)

select '$.g ? ((@.x >= 123 || @.a == 4) is unknown)'::jsonpath;
                    jsonpath                     
-------------------------------------------------
 $."g"?((@."x" >= 123 || @."a" == 4) is unknown)
(1 row)

select '$.g ? (exists (.x))'::jsonpath;
        jsonpath        
------------------------
 $."g"?(exists (@."x"))
(1 row)

select '$.g ? (exists (@.x ? (@ == 14)))'::jsonpath;
             jsonpath             
----------------------------------
 $."g"?(exists (@."x"?(@ == 14)))
(1 row)

select '$.g ? (exists (.x ? (@ == 14)))'::jsonpath;
             jsonpath             
----------------------------------
 $."g"?(exists (@."x"?(@ == 14)))
(1 row)

select '$.g ? ((@.x >= 123 || @.a == 4) && exists (.x ? (@ == 14)))'::jsonpath;
                             jsonpath                             
------------------------------------------------------------------
 $."g"?((@."x" >= 123 || @."a" == 4) && exists (@."x"?(@ == 14)))
(1 row)

select '$.g ? (+@.x >= +-(+@.a + 2))'::jsonpath;
              jsonpath              
------------------------------------
 $."g"?(+@."x" >= +(-(+@."a" + 2)))
(1 row)

select '$a'::jsonpath;
 jsonpath 
----------
 $"a"
(1 row)

select '$a.b'::jsonpath;
 jsonpath 
----------
 $"a"."b"
(1 row)

select '$a[*]'::jsonpath;
 jsonpath 
----------
 $"a"[*]
(1 row)

select '$.g ? (@.zip == $zip)'::jsonpath;
         jsonpath          
---------------------------
 $."g"?(@."zip" == $"zip")
(1 row)

select '$.a[1,2, 3 to 16]'::jsonpath;
      jsonpath      
--------------------
 $."a"[1,2,3 to 16]
(1 row)

select '$.a[$a + 1, ($b[*]) to -(@[0] * 2)]'::jsonpath;
                jsonpath                
----------------------------------------
 $."a"[$"a" + 1,$"b"[*] to -(@[0] * 2)]
(1 row)

select '$.a[$.a.size() - 3]'::jsonpath;
        jsonpath         
-------------------------
 $."a"[$."a".size() - 3]
(1 row)

select 'last'::jsonpath;
ERROR:  LAST is allowed only in array subscripts
LINE 1: select 'last'::jsonpath;
               ^
select '"last"'::jsonpath;
 jsonpath 
----------
 "last"
(1 row)

select '$.last'::jsonpath;
 jsonpath 
----------
 $."last"
(1 row)

select '$ ? (last > 0)'::jsonpath;
ERROR:  LAST is allowed only in array subscripts
LINE 1: select '$ ? (last > 0)'::jsonpath;
               ^
select '$[last]'::jsonpath;
 jsonpath 
----------
 $[last]
(1 row)

select '$[@ ? (last > 0)]'::jsonpath;
    jsonpath     
-----------------
 $[@?(last > 0)]
(1 row)

select 'null.type()'::jsonpath;
  jsonpath   
-------------
 null.type()
(1 row)

select '1.type()'::jsonpath;
 jsonpath 
----------
 1.type()
(1 row)

select '"aaa".type()'::jsonpath;
   jsonpath   
--------------
 "aaa".type()
(1 row)

select 'true.type()'::jsonpath;
  jsonpath   
-------------
 true.type()
(1 row)

select '$.datetime()'::jsonpath;
   jsonpath   
--------------
 $.datetime()
(1 row)

select '$.datetime("datetime template")'::jsonpath;
            jsonpath             
---------------------------------
 $.datetime("datetime template")
(1 row)

select '$ ? (@ starts with "abc")'::jsonpath;
        jsonpath         
-------------------------
 $?(@ starts with "abc")
(1 row)

select '$ ? (@ starts with $var)'::jsonpath;
         jsonpath         
--------------------------
 $?(@ starts with $"var")
(1 row)

select '$ ? (@ like_regex "pattern")'::jsonpath;
          jsonpath          
----------------------------
 $?(@ like_regex "pattern")
(1 row)

select '$ ? (@ like_regex "pattern" flag "")'::jsonpath;
          jsonpath          
----------------------------
 $?(@ like_regex "pattern")
(1 row)

select '$ ? (@ like_regex "pattern" flag "i")'::jsonpath;
              jsonpath               
-------------------------------------
 $?(@ like_regex "pattern" flag "i")
(1 row)

select '$ ? (@ like_regex "pattern" flag "is")'::jsonpath;
               jsonpath               
--------------------------------------
 $?(@ like_regex "pattern" flag "is")
(1 row)

select '$ ? (@ like_regex "pattern" flag "isim")'::jsonpath;
               jsonpath               
--------------------------------------
 $?(@ like_regex "pattern" flag "im")
(1 row)

select '$ ? (@ like_regex "pattern" flag "xsms")'::jsonpath;
               jsonpath               
--------------------------------------
 $?(@ like_regex "pattern" flag "sx")
(1 row)

select '$ ? (@ like_regex "pattern" flag "a")'::jsonpath;
ERROR:  bad jsonpath representation
LINE 1: select '$ ? (@ like_regex "pattern" flag "a")'::jsonpath;
               ^
DETAIL:  unrecognized flag of LIKE_REGEX predicate at or near """
select '$ < 1'::jsonpath;
 jsonpath 
----------
 ($ < 1)
(1 row)

select '($ < 1) || $.a.b <= $x'::jsonpath;
           jsonpath           
------------------------------
 ($ < 1 || $."a"."b" <= $"x")
(1 row)

select '@ + 1'::jsonpath;
ERROR:  @ is not allowed in root expressions
LINE 1: select '@ + 1'::jsonpath;
               ^
select '($).a.b'::jsonpath;
 jsonpath  
-----------
 $."a"."b"
(1 row)

select '($.a.b).c.d'::jsonpath;
     jsonpath      
-------------------
 $."a"."b"."c"."d"
(1 row)

select '($.a.b + -$.x.y).c.d'::jsonpath;
             jsonpath             
----------------------------------
 ($."a"."b" + -$."x"."y")."c"."d"
(1 row)

select '(-+$.a.b).c.d'::jsonpath;
        jsonpath         
-------------------------
 (-(+$."a"."b"))."c"."d"
(1 row)

select '1 + ($.a.b + 2).c.d'::jsonpath;
           jsonpath            
-------------------------------
 (1 + ($."a"."b" + 2)."c"."d")
(1 row)

select '1 + ($.a.b > 2).c.d'::jsonpath;
           jsonpath            
-------------------------------
 (1 + ($."a"."b" > 2)."c"."d")
(1 row)

select '1, 2 + 3, $.a[*] + 5'::jsonpath;
        jsonpath        
------------------------
 1, 2 + 3, $."a"[*] + 5
(1 row)

select '(1, 2, $.a)'::jsonpath;
  jsonpath   
-------------
 1, 2, $."a"
(1 row)

select '(1, 2, $.a).a[*]'::jsonpath;
       jsonpath       
----------------------
 (1, 2, $."a")."a"[*]
(1 row)

select '(1, 2, $.a) == 5'::jsonpath;
       jsonpath       
----------------------
 ((1, 2, $."a") == 5)
(1 row)

select '$[(1, 2, $.a) to (3, 4)]'::jsonpath;
          jsonpath          
----------------------------
 $[(1, 2, $."a") to (3, 4)]
(1 row)

select '$[(1, (2, $.a)), 3, (4, 5)]'::jsonpath;
          jsonpath           
-----------------------------
 $[(1, (2, $."a")),3,(4, 5)]
(1 row)

select '[]'::jsonpath;
 jsonpath 
----------
 []
(1 row)

select '[[1, 2], ([(3, 4, 5), 6], []), $.a[*]]'::jsonpath;
                 jsonpath                 
------------------------------------------
 [[1, 2], ([(3, 4, 5), 6], []), $."a"[*]]
(1 row)

select '{}'::jsonpath;
 jsonpath 
----------
 {}
(1 row)

select '{a: 1 + 2}'::jsonpath;
   jsonpath   
--------------
 {"a": 1 + 2}
(1 row)

select '{a: 1 + 2, b : (1,2), c: [$[*],4,5], d: { "e e e": "f f f" }}'::jsonpath;
                               jsonpath                                
-----------------------------------------------------------------------
 {"a": 1 + 2, "b": (1, 2), "c": [$[*], 4, 5], "d": {"e e e": "f f f"}}
(1 row)

select '$ ? (@.a < 1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < -1)'::jsonpath;
    jsonpath    
----------------
 $?(@."a" < -1)
(1 row)

select '$ ? (@.a < +1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < .1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 0.1)
(1 row)

select '$ ? (@.a < -.1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < -0.1)
(1 row)

select '$ ? (@.a < +.1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 0.1)
(1 row)

select '$ ? (@.a < 0.1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 0.1)
(1 row)

select '$ ? (@.a < -0.1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < -0.1)
(1 row)

select '$ ? (@.a < +0.1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 0.1)
(1 row)

select '$ ? (@.a < 10.1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < 10.1)
(1 row)

select '$ ? (@.a < -10.1)'::jsonpath;
     jsonpath      
-------------------
 $?(@."a" < -10.1)
(1 row)

select '$ ? (@.a < +10.1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < 10.1)
(1 row)

select '$ ? (@.a < 1e1)'::jsonpath;
    jsonpath    
----------------
 $?(@."a" < 10)
(1 row)

select '$ ? (@.a < -1e1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < -10)
(1 row)

select '$ ? (@.a < +1e1)'::jsonpath;
    jsonpath    
----------------
 $?(@."a" < 10)
(1 row)

select '$ ? (@.a < .1e1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < -.1e1)'::jsonpath;
    jsonpath    
----------------
 $?(@."a" < -1)
(1 row)

select '$ ? (@.a < +.1e1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < 0.1e1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < -0.1e1)'::jsonpath;
    jsonpath    
----------------
 $?(@."a" < -1)
(1 row)

select '$ ? (@.a < +0.1e1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < 10.1e1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 101)
(1 row)

select '$ ? (@.a < -10.1e1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < -101)
(1 row)

select '$ ? (@.a < +10.1e1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 101)
(1 row)

select '$ ? (@.a < 1e-1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 0.1)
(1 row)

select '$ ? (@.a < -1e-1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < -0.1)
(1 row)

select '$ ? (@.a < +1e-1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 0.1)
(1 row)

select '$ ? (@.a < .1e-1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < 0.01)
(1 row)

select '$ ? (@.a < -.1e-1)'::jsonpath;
     jsonpath      
-------------------
 $?(@."a" < -0.01)
(1 row)

select '$ ? (@.a < +.1e-1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < 0.01)
(1 row)

select '$ ? (@.a < 0.1e-1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < 0.01)
(1 row)

select '$ ? (@.a < -0.1e-1)'::jsonpath;
     jsonpath      
-------------------
 $?(@."a" < -0.01)
(1 row)

select '$ ? (@.a < +0.1e-1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < 0.01)
(1 row)

select '$ ? (@.a < 10.1e-1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < 1.01)
(1 row)

select '$ ? (@.a < -10.1e-1)'::jsonpath;
     jsonpath      
-------------------
 $?(@."a" < -1.01)
(1 row)

select '$ ? (@.a < +10.1e-1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < 1.01)
(1 row)

select '$ ? (@.a < 1e+1)'::jsonpath;
    jsonpath    
----------------
 $?(@."a" < 10)
(1 row)

select '$ ? (@.a < -1e+1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < -10)
(1 row)

select '$ ? (@.a < +1e+1)'::jsonpath;
    jsonpath    
----------------
 $?(@."a" < 10)
(1 row)

select '$ ? (@.a < .1e+1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < -.1e+1)'::jsonpath;
    jsonpath    
----------------
 $?(@."a" < -1)
(1 row)

select '$ ? (@.a < +.1e+1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < 0.1e+1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < -0.1e+1)'::jsonpath;
    jsonpath    
----------------
 $?(@."a" < -1)
(1 row)

select '$ ? (@.a < +0.1e+1)'::jsonpath;
   jsonpath    
---------------
 $?(@."a" < 1)
(1 row)

select '$ ? (@.a < 10.1e+1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 101)
(1 row)

select '$ ? (@.a < -10.1e+1)'::jsonpath;
     jsonpath     
------------------
 $?(@."a" < -101)
(1 row)

select '$ ? (@.a < +10.1e+1)'::jsonpath;
    jsonpath     
-----------------
 $?(@."a" < 101)
(1 row)

select '@1'::jsonpath;
ERROR:  invalid outer item reference in jsonpath @
LINE 1: select '@1'::jsonpath;
               ^
select '@-1'::jsonpath;
ERROR:  @ is not allowed in root expressions
LINE 1: select '@-1'::jsonpath;
               ^
select '$ ? (@0 > 1)'::jsonpath;
 jsonpath  
-----------
 $?(@ > 1)
(1 row)

select '$ ? (@1 > 1)'::jsonpath;
ERROR:  invalid outer item reference in jsonpath @
LINE 1: select '$ ? (@1 > 1)'::jsonpath;
               ^
select '$.a ? (@.b ? (@1 > @) > 5)'::jsonpath;
          jsonpath          
----------------------------
 $."a"?(@."b"?(@1 > @) > 5)
(1 row)

select '$.a ? (@.b ? (@2 > @) > 5)'::jsonpath;
ERROR:  invalid outer item reference in jsonpath @
LINE 1: select '$.a ? (@.b ? (@2 > @) > 5)'::jsonpath;
               ^
-- jsonpath combination operators
select jsonpath '$.a' == jsonpath '$[*] + 1';
      ?column?       
---------------------
 ($."a" == $[*] + 1)
(1 row)

-- should fail
select jsonpath '$.a' == jsonpath '$.b == 1';
        ?column?         
-------------------------
 ($."a" == ($."b" == 1))
(1 row)

--select jsonpath '$.a' != jsonpath '$[*] + 1';
select jsonpath '$.a' >  jsonpath '$[*] + 1';
      ?column?      
--------------------
 ($."a" > $[*] + 1)
(1 row)

select jsonpath '$.a' <  jsonpath '$[*] + 1';
      ?column?      
--------------------
 ($."a" < $[*] + 1)
(1 row)

select jsonpath '$.a' >= jsonpath '$[*] + 1';
      ?column?       
---------------------
 ($."a" >= $[*] + 1)
(1 row)

select jsonpath '$.a' <= jsonpath '$[*] + 1';
      ?column?       
---------------------
 ($."a" <= $[*] + 1)
(1 row)

select jsonpath '$.a' +  jsonpath '$[*] + 1';
       ?column?       
----------------------
 ($."a" + ($[*] + 1))
(1 row)

select jsonpath '$.a' -  jsonpath '$[*] + 1';
       ?column?       
----------------------
 ($."a" - ($[*] + 1))
(1 row)

select jsonpath '$.a' *  jsonpath '$[*] + 1';
       ?column?       
----------------------
 ($."a" * ($[*] + 1))
(1 row)

select jsonpath '$.a' /  jsonpath '$[*] + 1';
       ?column?       
----------------------
 ($."a" / ($[*] + 1))
(1 row)

select jsonpath '$.a' %  jsonpath '$[*] + 1';
       ?column?       
----------------------
 ($."a" % ($[*] + 1))
(1 row)

select jsonpath '$.a' == jsonb '"aaa"';
     ?column?     
------------------
 ($."a" == "aaa")
(1 row)

--select jsonpath '$.a' != jsonb '1';
select jsonpath '$.a' >   jsonb '12.34';
    ?column?     
-----------------
 ($."a" > 12.34)
(1 row)

select jsonpath '$.a' <   jsonb '"aaa"';
    ?column?     
-----------------
 ($."a" < "aaa")
(1 row)

select jsonpath '$.a' >=  jsonb 'true';
    ?column?     
-----------------
 ($."a" >= true)
(1 row)

select jsonpath '$.a' <=  jsonb 'false';
     ?column?     
------------------
 ($."a" <= false)
(1 row)

select jsonpath '$.a' +   jsonb 'null';
    ?column?    
----------------
 ($."a" + null)
(1 row)

select jsonpath '$.a' -   jsonb '12.3';
    ?column?    
----------------
 ($."a" - 12.3)
(1 row)

select jsonpath '$.a' *   jsonb '5';
  ?column?   
-------------
 ($."a" * 5)
(1 row)

select jsonpath '$.a' /   jsonb '0';
  ?column?   
-------------
 ($."a" / 0)
(1 row)

select jsonpath '$.a' %   jsonb '"1.23"';
     ?column?     
------------------
 ($."a" % "1.23")
(1 row)

select jsonpath '$.a' ==  jsonb '[]';
   ?column?    
---------------
 ($."a" == [])
(1 row)

select jsonpath '$.a' >=  jsonb '[1, "2", true, null, [], {"a": [1], "b": 3}]';
                        ?column?                         
---------------------------------------------------------
 ($."a" >= [1, "2", true, null, [], {"a": [1], "b": 3}])
(1 row)

select jsonpath '$.a' +   jsonb '{}';
   ?column?   
--------------
 ($."a" + {})
(1 row)

select jsonpath '$.a' /   jsonb '{"a": 1, "b": [1, {}], "c": {}, "d": {"e": true, "f": {"g": "abc"}}}';
                                    ?column?                                    
--------------------------------------------------------------------------------
 ($."a" / {"a": 1, "b": [1, {}], "c": {}, "d": {"e": true, "f": {"g": "abc"}}})
(1 row)

select jsonpath '$' -> 'a';
 ?column? 
----------
 $."a"
(1 row)

select jsonpath '$' -> 1;
 ?column? 
----------
 $[1]
(1 row)

select jsonpath '$' -> 'a' -> 1;
 ?column? 
----------
 $."a"[1]
(1 row)

select jsonpath '$.a' ? jsonpath '$.x ? (@.y ? (@ > 3 + @1.b + $) == $) > $.z';
                          ?column?                           
-------------------------------------------------------------
 $."a"?(@."x"?(@."y"?(@ > (3 + @1."b") + @2) == @1) > @."z")
(1 row)

select jsonpath '$.a.b[(@[*]?(@ > @1).c + 1.23).**{2,5}] ? ({a: @, b: [$.x, [], @ % 5]}.b[2] > 3)' ?
       jsonpath '$.**[@.size() + 3] ? (@ + $ ? (@ > @1 ? ($1 + $2 * @ - $ != 5) / $) < 10) > true';
                                                                                     ?column?                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 $."a"."b"[@[*]?(@ > @1)."c" + 1.23.**{2,5}]?({"a": @, "b": [$."x", [], @ % 5]}."b"[2] > 3)?(@.**[@.size() + 3]?(@ + @1?(@ > @1?(($"1" + $"2" * @) - @3 != 5) / @2) < 10) > true)
(1 row)

select jsonpath '$.a + $a' @ jsonb '"aaa"';
    ?column?    
----------------
 ($."a" + $"a")
(1 row)

select jsonpath '$.a + $a' @ jsonb '{"b": "abc"}';
    ?column?    
----------------
 ($."a" + $"a")
(1 row)

select jsonpath '$.a + $a' @ jsonb '{"a": "abc"}';
    ?column?     
-----------------
 ($."a" + "abc")
(1 row)

select jsonpath '$.a + $a.double()' @ jsonb '{"a": "abc"}';
         ?column?         
--------------------------
 ($."a" + "abc".double())
(1 row)

select jsonpath '$.a + $a.x.double()' @ jsonb '{"a": {"x": -12.34}}';
               ?column?               
--------------------------------------
 ($."a" + {"x": -12.34}."x".double())
(1 row)

select jsonpath '$[*] ? (@ > $min && @ <= $max)' @ jsonb '{"min": -1.23, "max": 5.0}';
           ?column?           
------------------------------
 $[*]?(@ > -1.23 && @ <= 5.0)
(1 row)

select jsonpath '$[*] ? (@ > $min && @ <= $max)' @ jsonb '{"min": -1.23}' @ jsonb '{"max": 5.0}';
           ?column?           
------------------------------
 $[*]?(@ > -1.23 && @ <= 5.0)
(1 row)

-- extension: user-defined item methods and functions with lambda expressions
select jsonpath 'foo()';
 jsonpath 
----------
 "foo"()
(1 row)

select jsonpath '$.foo()';
 jsonpath  
-----------
 $."foo"()
(1 row)

select jsonpath 'foo($[*])';
  jsonpath   
-------------
 "foo"($[*])
(1 row)

select jsonpath '$.foo("bar")';
    jsonpath    
----------------
 $."foo"("bar")
(1 row)

select jsonpath 'foo($[*], "bar")';
      jsonpath      
--------------------
 "foo"($[*], "bar")
(1 row)

select jsonpath '$.foo("bar", 123 + 456, "baz".type())';
                jsonpath                 
-----------------------------------------
 $."foo"("bar", 123 + 456, "baz".type())
(1 row)

select jsonpath 'foo($[*], "bar", 123 + 456, "baz".type())';
                  jsonpath                   
---------------------------------------------
 "foo"($[*], "bar", 123 + 456, "baz".type())
(1 row)

select jsonpath '$.foo(() => 1)';
     jsonpath     
------------------
 $."foo"(() => 1)
(1 row)

select jsonpath 'foo($[*], () => 1)';
       jsonpath       
----------------------
 "foo"($[*], () => 1)
(1 row)

select jsonpath '$.foo((x) => x + 5)';
       jsonpath        
-----------------------
 $."foo"((x) => x + 5)
(1 row)

select jsonpath 'foo($[*], (x) => x + 5)';
         jsonpath          
---------------------------
 "foo"($[*], (x) => x + 5)
(1 row)

select jsonpath '$.foo(x => x + 5)';
       jsonpath        
-----------------------
 $."foo"((x) => x + 5)
(1 row)

select jsonpath 'foo($[*], x => x + 5)';
         jsonpath          
---------------------------
 "foo"($[*], (x) => x + 5)
(1 row)

select jsonpath '$.foo((x, y) => x + 5 * y)';
           jsonpath           
------------------------------
 $."foo"((x, y) => x + 5 * y)
(1 row)

select jsonpath 'foo($[*], (x, y) => x + 5 * y)';
             jsonpath             
----------------------------------
 "foo"($[*], (x, y) => x + 5 * y)
(1 row)

select jsonpath '$.foo((x, y) => x + 5 * y, z => z.type(), () => $.bar(x => x + 1)).baz()';
                                      jsonpath                                      
------------------------------------------------------------------------------------
 $."foo"((x, y) => x + 5 * y, (z) => z.type(), () => $."bar"((x) => x + 1))."baz"()
(1 row)

select jsonpath 'foo($[*], (x, y) => x + 5 * y, z => z.type(), () => $.bar(x => x + 1)).baz()';
                                        jsonpath                                        
----------------------------------------------------------------------------------------
 "foo"($[*], (x, y) => x + 5 * y, (z) => z.type(), () => $."bar"((x) => x + 1))."baz"()
(1 row)

-- should fail
select jsonpath '$.foo((x, y.a) => x + 5)';
ERROR:  bad jsonpath representation
LINE 1: select jsonpath '$.foo((x, y.a) => x + 5)';
                        ^
DETAIL:  lambda arguments must be identifiers at or near ")"
select jsonpath '$.foo((x, y + 1, z) => x + y)';
ERROR:  bad jsonpath representation
LINE 1: select jsonpath '$.foo((x, y + 1, z) => x + y)';
                        ^
DETAIL:  lambda arguments must be identifiers at or near ")"
